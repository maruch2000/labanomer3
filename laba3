main файл:
#include "shop.h"

int main() {
    Laptop **laptops = NULL;
    int count = 0;
    if (!load_laptops(&laptops, &count, "laptops.bin")) {
        fprintf(stderr, "Ошибка\n");
        return 1;
    }

    int choice;
    do {
        printf("\nМеню:\n");
        printf("1. Вывести ноутбуки\n");
        printf("2. Добавить ноутбук\n");
        printf("3. Удалить ноутбук\n");
        printf("4. Редактировать ноутбук\n");
        printf("5. Найти ноутбук\n");
        printf("0. Выход\n");
        printf("Введите номер: ");
        if (scanf("%d", &choice) != 1) {
            fprintf(stderr, "Неверно\n");
            while (getchar() != '\n');
            continue;
        }

        switch (choice) {
            case 1: print_laptops(laptops, count); break;
            case 2: add_laptop(&laptops, &count); break;
            case 3: delete_laptop(&laptops, &count); break;
            case 4: edit_laptop(laptops, count); break;
            case 5: search_laptops(laptops, count); break;
            case 0: printf("Выход...\n"); break;
            default: printf("Неверно\n");
        }
    } while (choice != 0);

    if (!save_laptops(laptops, count, "laptops.bin")) {
        fprintf(stderr, "Ошибка\n");
    }

    for (int i = 0; i < count; i++){
        free(laptops[i]);
    }
    free(laptops);
    return 0;
}











Заголовочный файл:
#ifndef SHOP_H
#define SHOP_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define MAX_NAME 50
#define MAX_DESC 100
#define MAX_CPU 50
#define MAX_RAM 20
#define MAX_GPU 50
#define MAX_STORAGE 20

typedef struct {
    char name[MAX_NAME];
    float price;
    char description[MAX_DESC];
    char cpu[MAX_CPU];
    char ram[MAX_RAM];
    char storage[MAX_STORAGE];
    char gpu[MAX_GPU];
} Laptop;

bool load_laptops(Laptop ***laptops, int *count, const char *filename);
bool save_laptops(Laptop **laptops, int count, const char *filename);
void add_laptop(Laptop ***laptops, int *count);
void delete_laptop(Laptop ***laptops, int *count);
void edit_laptop(Laptop **laptops, int count);
void search_laptops(Laptop **laptops, int count);
void print_laptops(Laptop **laptops, int count);

#endif




Функции:
#include "shop.h"
#include <errno.h>

bool load_laptops(Laptop ***laptops, int *count, const char *filename) {
    FILE *file = fopen(filename, "rb");
    if (file == NULL) return false;

    fseek(file, 0, SEEK_END);
    long fileSize = ftell(file);
    rewind(file);

    *count = fileSize / sizeof(Laptop);
    if (*count <= 0) {
        fclose(file);
        return true;
    }

    *laptops = (Laptop **)malloc(*count * sizeof(Laptop *));
    if (*laptops == NULL) {
        perror("Ошибка");
        fclose(file);
        return false;
    }
    for (int i = 0; i < *count; ++i){
        (*laptops)[i] = (Laptop*)malloc(sizeof(Laptop));
        if ((*laptops)[i] == NULL){
            perror("Ошибка");
            for (int j = 0; j < i; ++j) free((*laptops)[j]);
            free(*laptops);
            fclose(file);
            return false;
        }
    }

    if (fread(*(*laptops), sizeof(Laptop), *count, file) != *count) {
        perror("Ошибка");
        for (int i = 0; i < *count; ++i) free((*laptops)[i]);
        free(*laptops);
        fclose(file);
        return false;
    }

    fclose(file);
    return true;
}

bool save_laptops(Laptop **laptops, int count, const char *filename) {
    FILE *file = fopen(filename, "wb");
    if (file == NULL) return false;

    if (fwrite(laptops[0], sizeof(Laptop), count, file) != count) {
        perror("Ошибка");
        fclose(file);
        return false;
    }

    fclose(file);
    return true;
}

void add_laptop(Laptop ***laptops, int *count) {
    Laptop **new_laptops = (Laptop **)realloc(*laptops, (*count + 1) * sizeof(Laptop *));
    if (new_laptops == NULL) {
        perror("Ошибка");
        return;
    }
    *laptops = new_laptops;
    (*laptops)[*count] = (Laptop*)malloc(sizeof(Laptop));
    if ((*laptops)[*count] == NULL){
        perror("Ошибка");
        return;
    }
    printf("Введите название: ");
    scanf(" %[^\n]", (*laptops)[*count]->name);
    printf("Введите цену: ");
    scanf("%f", &(*laptops)[*count]->price);
    printf("Введите описание: ");
    scanf(" %[^\n]", (*laptops)[*count]->description);
    printf("Введите процессор: ");
    scanf(" %[^\n]", (*laptops)[*count]->cpu);
    printf("Введите оперативную память: ");
    scanf(" %[^\n]", (*laptops)[*count]->ram);
    printf("Введите накопитель: ");
    scanf(" %[^\n]", (*laptops)[*count]->storage);
    printf("Введите видеокарту: ");
    scanf(" %[^\n]", (*laptops)[*count]->gpu);
    (*count)++;
}

void delete_laptop(Laptop ***laptops, int *count) {
    if (*count == 0) {
        printf("Ничего нет в базе данных\n");
        return;
    }
    int index;
    printf("Введите номер ноутбука для удаления (1-%d): ", *count);
    scanf("%d", &index);
    if (index < 1 || index > *count) {
        printf("неверный номер\n");
        return;
    }
    free((*laptops)[index - 1]);
    for (int i = index - 1; i < *count - 1; i++) {
        (*laptops)[i] = (*laptops)[i + 1];
    }
    (*count)--;
    (*laptops) = (Laptop **)realloc(*laptops, (*count) * sizeof(Laptop *));
}


void edit_laptop(Laptop **laptops, int count) {
    if (count == 0) {
        printf("Ничего нет в базе данных\n");
        return;
    }
    int index;
    printf("Введите номер ноутбука для редактирования (1-%d): ", count);
    scanf("%d", &index);
    if (index < 1 || index > count) {
        printf("Неверный номер\n");
        return;
    }
    index--;
    printf("Введите новое название: ");
    scanf(" %[^\n]", laptops[index]->name);
    printf("Введите новую цену: ");
    scanf("%f", &laptops[index]->price);
    printf("Введите новое описание: ");
    scanf(" %[^\n]", laptops[index]->description);
    printf("Введите новый процессор: ");
    scanf(" %[^\n]", laptops[index]->cpu);
    printf("Введите новую оперативную память: ");
    scanf(" %[^\n]", laptops[index]->ram);
    printf("Введите новый накопитель: ");
    scanf(" %[^\n]", laptops[index]->storage);
    printf("Введите новую видеокарту: ");
    scanf(" %[^\n]", laptops[index]->gpu);
}

void search_laptops(Laptop **laptops, int count) {
    if (count == 0) {
        printf("ничего нет в базе данных\n");
        return;
    }
    char name_keyword[MAX_NAME];
    char gpu_keyword[MAX_GPU];
    printf("Введите ключевое слово: ");
    scanf(" %[^\n]", name_keyword);
    printf("Введите ключевое слово: ");
    scanf(" %[^\n]", gpu_keyword);

    for (int i = 0; i < count; i++) {
        if (strstr(laptops[i]->name, name_keyword) != NULL && strstr(laptops[i]->gpu, gpu_keyword) != NULL) {
            printf("Ноутбук %d:\n", i + 1);
            printf("Название: %s\n", laptops[i]->name);
            printf("Цена: %.2f\n", laptops[i]->price);
            printf("Описание: %s\n", laptops[i]->description);
            printf("процессор: %s\n", laptops[i]->cpu);
            printf("Оперативная память: %s\n", laptops[i]->ram);
            printf("Накопитель: %s\n", laptops[i]->storage);
            printf("Видеокарта: %s\n\n", laptops[i]->gpu);
        }
    }
}

void print_laptops(Laptop **laptops, int count) {
    if (count == 0) {
        printf("Ничего нет в базе данных\n");
        return;
    }
    for (int i = 0; i < count; i++) {
        printf("Ноутбук %d:\n", i + 1);
        printf("Название: %s\n", laptops[i]->name);
        printf("Цена: %.2f\n", laptops[i]->price);
        printf("Описание: %s\n", laptops[i]->description);
        printf("Процессор: %s\n", laptops[i]->cpu);
        printf("Оперативная память: %s\n", laptops[i]->ram);
        printf("Накопитель: %s\n", laptops[i]->storage);
        printf("Видеокарта: %s\n\n", laptops[i]->gpu);
    }
}





Makefile:
CC = gcc
CFLAGS = -Wall -Werror

all: laptops

laptops: main.o shop.o
	$(CC) $(CFLAGS) -o laptops main.o shop.o

main.o: main.c shop.h
	$(CC) $(CFLAGS) -c main.c

shop.o: shop.c shop.h
	$(CC) $(CFLAGS) -c shop.c

clean:
	rm -f *.o laptops














